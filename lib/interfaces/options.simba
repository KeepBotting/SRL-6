(*
Options
=======

The options file holds functions and procedures that are used to interact with the runescape options menu.

The source for this file can be found `here <https://github.com/SRL/SRL-6/blob/master/lib/interfaces/options.simba>`_.

*)

{$f-}

(*
Consts, Types, Vars
~~~~~~~~~~~~~~~~~~~

The following constants, types and variables are used throughout the collectBox methods.

**type TRSOptions**

.. code-block:: pascal

    type
      TRSOptions = type TRSInterface;

A type that stores functions and properties of the Runescape options menu.
*)
type
  TRSOptions = type TRSInterface;

(*
**var options**

.. code-block:: pascal

    var
      options: TRSOptions;

A variable through which scripters can access the TRSOptions type methods.

*)
var
  options: TRSOptions;

(*
TRSOptions methods
~~~~~~~~~~~~~~~~~~

The following methods should be called through the **options** variable.

Example:

.. code-block:: pascal

    if options.isOpen() then
      writeln('Options interface is open!');
*)

{*
__init
------

.. code-block:: pascal

    procedure TRSOptions.__init();

Initializes the TRSOptions.

.. note::

    - by Coh3n
    - Last updated: 10 July 2018

Example:

.. code-block:: pascal

    options.__init();
*}
{$IFNDEF CODEINSIGHT}
procedure TRSOptions.__init();
begin
  with self do
  begin
    name := 'RS Options Menu';
    ID := ID_INTERFACE_OPTIONS;
    parentID := -1;
    isStatic := false;
  end;
end;
{$ENDIF}

{*
__find
------

.. code-block:: pascal

    function TRSOptions.__find(): boolean;

Returns true if the options interface is detected and its bounds are set.
Scripters should use options.isOpen() below.

.. note::

    - by Coh3n
    - Last Updated: 10 July 2018 by Ashaman88

Example:

.. code-block:: pascal

    if options.__find() then
      writeln('The options interface is open, and the bounds are set!');
*}
{$IFNDEF CODEINSIGHT}
function TRSOptions.__find(): boolean;
const
  GOLD_COLOR = 379903; //optionsmenu
  TEXT_LENGTH = 135;    //length of options menu
  SPLIT_LINE = 6247745;   //grey line split down the middle
var
  tpa: TPointArray;
  atpa: T2DPointArray;
  i, hh: integer;
  b: TBox;
begin
  result := false;

  if (not findColors(tpa, GOLD_COLOR, getClientBounds())) then
    exit();

  atpa := tpa.cluster(10);
  hh := high(atpa);

  for i := 0 to hh do
    if (length(atpa[i]) = TEXT_LENGTH) then
    begin
      b := getTPABounds(atpa[i]);

      if (getColor(b.x2 - 52, b.y1 + 113) = SPLIT_LINE) then
      begin
        self.setBounds([b.x1 - 178, b.y1 - 10, b.x2 + 179, b.y2 + 210]);
        exit(true);
      end;
    end;
end;
{$ENDIF}

(*
isOpen
------

.. code-block:: pascal

    function TRSOptions.isOpen(waitTime: integer = 0): boolean;

Returns true if the options interface is open. The optional **waitTime** parameter
*(default = 0)* is the maximum time (in milliseconds) it will keep looking.

.. note::

    - by Coh3n
    - Last Updated: 5 August 2015 by The Mayor

Example:

.. code-block:: pascal

    if options.isOpen() then
      writeln('The options menu is open!');
*)
function TRSOptions.isOpen(waitTime: integer = 0): boolean;
var
  t: UInt64;
begin
  t := (getTickCount() + waitTime);

  repeat
    if self.__find() then
    begin
      result := true;
      break();
    end;
  until (getSystemTime() >= t);

  print('TRSOptions.isOpen() result: ' + boolToStr(result));
end;

(*
open
----

.. code-block:: pascal

    function TRSOptions.open(waitTime: integer = 5000): boolean;

Returns true if the options interface is successfully opened. The optional
**waitTime** parameter *(default = 5000)* is the maximum time (in milliseconds)
it will keep looking.

.. note::

    - by Coh3n
    - Last Updated: 5 August 2015 by The Mayor

Example:

.. code-block:: pascal

    if (options.open()) then
      writeln('We opened the options interface');
*)
function TRSOptions.open(waitTime: integer = 5000): boolean;
var
  t: UInt64;
begin
  if self.isOpen() then
    exit(true);

  typeByte(VK_ESCAPE);

  t := (getTickCount() + waitTime + random(400));

  while (getTickCount() < t) do
    if self.isOpen(2000) then
    begin
      result := true;
      break();
    end else
      typeByte(VK_ESCAPE);
end;

(*
_getOptions
-----------

.. code-block:: pascal

    function TRSOptions._getOptions(var Buttons: TBoxArray; var Texts: TStringArray): boolean;

Passes all the buttons on the options menu as a TBoxArray **Buttons** and passes
a TStringArray **Texts** of the text for each button. Returns true if successfull.

.. note::

    - by Ashaman88
    - Last Updated: 26 February 2014 by Ashaman88

Example:

.. code-block:: pascal

    var
      txt: TStringArray;
      tba: TBoxArray;
    begin
      if options._getOptions(tba, txt) then
        writeLn('We have all the button bounds and text');
    end;
*)
function TRSOptions._getOptions(var Buttons: TBoxArray; var Texts: TStringArray): boolean;
var
  TPA: TPointArray;
  ATPA: T2DPointArray;
  i: Integer;
  b: TBox;
begin
  Result := True;
  if (not Self.isOpen()) then
    Exit(False);

  if (not FindColorsTolerance(TPA, 9998984, Self.getBounds(), 10, ColorSetting(1))) then
    Exit(False);

  ATPA := ClusterTPAEx(TPA, 5, 1);

  for i := 0 to High(ATPA) do
  begin
    b := GetTPABounds(ATPA[i]);
    Inc(b.y2, 18);

    if ((b.X2 - b.X1) > 30) then
    begin
      Insert(b, Buttons);
      Insert(Tesseract_GetText(b, TESS_FILTER_SMALL_CHARS_2), Texts);
    end;
  end;
end;

(*
selectOption
------------

.. code-block:: pascal

    function TRSOptions.selectOption(txt: TStringArray): boolean;

Returns true if it successfully clicks the button on the options menu that
matches a string in the TStringArray **txt** .

.. note::

    - by Ashaman88
    - Last Updated: 26 February 2014 by Ashaman88

Example:

.. code-block:: pascal

    if options.selectOption(['Logout', 'gout']) then
      writeLn('Successfully clicked the logout button!');

*)
function TRSOptions.selectOption(txt: TStringArray): boolean;
var
  texts: TStringArray;
  i, j: Integer;
  b: TBoxArray;
begin
  if not self.Open() then
    exit(false);

  self._getOptions(b, texts);

  for i := 0 to high(txt) do
    for j := 0 to high(texts) do
      if (pos(txt[i], texts[j]) > 0) then
      begin
        mouseBox(b[j], MOUSE_LEFT);
        exit(true);
      end;
end;

begin
  options.__init();
end;

{$f+}
